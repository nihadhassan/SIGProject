package Frame;


import java.awt.Font;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import com.invoicesales.*;
import com.invoicesales.InvoiceLine;
import java.awt.event.ActionEvent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.*;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;
import javax.swing.text.NumberFormatter;
public class MainJFrame extends javax.swing.JFrame implements ActionListener, ListSelectionListener{
    /**
     * Creates new form MainJFrame
     */
    static volatile int lastSelection=-1;
    static volatile int rIndex=-1;
    static volatile boolean editflagg=false;
    static volatile boolean editflag=false;
    static volatile boolean addflag=false;
    static volatile boolean removeflag=false;
    static volatile int max=0;
    static File selectedfile1=null;
    static File selectedfile2=null;
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog2 = new javax.swing.JDialog();
        jTextField3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jDialog3 = new javax.swing.JDialog();
        jTextField5 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jTextField7 = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        InvoiceTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        InvoicesItems = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel3.setFont(new Font("Arial", Font.BOLD, 12));
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        LoadFile = new javax.swing.JMenuItem();
        SaveFile = new javax.swing.JMenuItem();

        jDialog2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog2.setTitle("Creat New Invoice");
        jDialog2.setAlwaysOnTop(true);
        jDialog2.setBounds(new java.awt.Rectangle(100, 100, 100, 100));
        jDialog2.setMinimumSize(new java.awt.Dimension(400, 200));
        jDialog2.setSize(new java.awt.Dimension(100, 100));
        jDialog2.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jDialog2WindowClosing(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel10.setText("Customer Name:");

        jTextField4.setEditable(false);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel11.setText("Invoice Date:");

        jButton6.setText("OK");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Cancel");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(35, 35, 35)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(jTextField3))
                .addGap(45, 45, 45))
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(26, 26, 26)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel2.setFont(new Font("Arial", Font.BOLD, 12));
        jButton1.setFont(new Font("Arial", Font.BOLD, 12));
        jButton2.setFont(new Font("Arial", Font.BOLD, 12));

        jDialog3.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog3.setTitle("Add New Item To Invoice Number ");
        jDialog3.setAlwaysOnTop(true);
        jDialog3.setBounds(new java.awt.Rectangle(100, 100, 100, 100));
        jDialog3.setLocation(new java.awt.Point(600, 250));
        jDialog3.setMinimumSize(new java.awt.Dimension(400, 200));
        jDialog3.setSize(new java.awt.Dimension(100, 100));

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel12.setText("Item Name:");

        jLabel13.setText("Item Price:");

        jButton8.setText("OK");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField7KeyTyped(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));

        jLabel14.setText("Item Count:");

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog3Layout.createSequentialGroup()
                .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(35, 35, 35)
                        .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField5)
                            .addComponent(jTextField7)
                            .addGroup(jDialog3Layout.createSequentialGroup()
                                .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                .addGap(71, 71, 71))))
                    .addGroup(jDialog3Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton9))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jLabel1.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel2.setFont(new Font("Arial", Font.BOLD, 12));
        jButton1.setFont(new Font("Arial", Font.BOLD, 12));
        jButton2.setFont(new Font("Arial", Font.BOLD, 12));
        ((JSpinner.DefaultEditor) jSpinner1.getEditor()).getTextField().setEditable(false);
        jLabel2.setFont(new Font("Arial", Font.BOLD, 12));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sales Invoice Generator By Omar Tarek");
        setLocation(new java.awt.Point(0, 0));
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Invoices Table");
        jLabel1.setToolTipText("");

        jButton1.setText("Creat New Invoice");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete Invoice");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        InvoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Date", "Customer", "Total"
            }
        ));
        InvoiceTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(InvoiceTable);
        if (InvoiceTable.getColumnModel().getColumnCount() > 0) {
            InvoiceTable.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(79, 79, 79))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(24, 24, 24))))
        );

        jLabel1.setFont(new Font("Arial", Font.BOLD, 12));
        jButton1.setFont(new Font("Arial", Font.BOLD, 12));
        jButton2.setFont(new Font("Arial", Font.BOLD, 12));

        jPanel2.setPreferredSize(new java.awt.Dimension(521, 472));

        jLabel2.setText("Invoice Number");

        jLabel4.setText("Invoice Date");

        jLabel5.setText("Customer Name");

        jLabel6.setText("Invoice Total");

        jLabel7.setText("Invoice Itemes");

        jTextField1.setEditable(false);

        jTextField2.setEditable(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        InvoicesItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Item Name", "Item Price", "Count", "Item Total"
            }
        ));
        InvoicesItems.setFocusTraversalPolicyProvider(true);
        InvoicesItems.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(InvoicesItems);

        jButton3.setText("Delete Item");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Add Item");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cancel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(63, 63, 63)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3)
                                    .addComponent(jTextField1)
                                    .addComponent(jTextField2)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel9)
                                        .addGap(199, 199, 199)))))
                        .addGap(0, 157, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jButton4)
                .addGap(26, 26, 26)
                .addComponent(jButton3)
                .addGap(39, 39, 39)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel3.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel4.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel5.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel6.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel7.setFont(new Font("Arial", Font.BOLD, 12));
        jTextField1.setFont(new Font("Arial", Font.BOLD, 12));
        jTextField2.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel8.setFont(new Font("Arial", Font.BOLD, 12));
        jButton3.setFont(new Font("Arial", Font.BOLD, 12));
        jButton4.setFont(new Font("Arial", Font.BOLD, 12));
        jButton5.setFont(new Font("Arial", Font.BOLD, 12));

        jMenu1.setText("File");
        jMenu1.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu1MenuSelected(evt);
            }
        });

        LoadFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        LoadFile.setText("Load Invoice Files");
        LoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileActionPerformed(evt);
            }
        });
        jMenu1.add(LoadFile);

        SaveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        SaveFile.setText("Save Invoice Files");
        SaveFile.setEnabled(false);
        SaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileActionPerformed(evt);
            }
        });
        jMenu1.add(SaveFile);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private volatile static ArrayList <InvoiceHeader> invoices= new ArrayList<>();
    private SimpleDateFormat date=new SimpleDateFormat("dd-MM-yyyy");
    InvoiceHeader line;
    private InvoiceHeader findID(int number)
    {
        for(int i=0;i<invoices.size();i++)
        {
            if(invoices.get(i).getInoviceNumber() == number)
                return invoices.get(i);                
        }
        return null;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        editflagg=true;
        if((selectedfile1==null) || (selectedfile2==null))
        {
            JOptionPane.showMessageDialog(jScrollPane1, "Please Select InvoiceHeader & InvoiceLine Files First","Error",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
        SimpleDateFormat datee=new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
        Date invDate=new Date();
        jTextField4.setText(datee.format(invDate));
        jDialog2.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        editflagg=true;
        for(int i=0;i<invoices.size();i++)
        {
            
            if((invoices.get(i).getInoviceNumber())>(max))
            {
                max=invoices.get(i).getInoviceNumber();
               
            }
        }
        int invoiceToBeDeleted= InvoiceTable.getSelectedRow();
        if((invoiceToBeDeleted==-1))
        {
            JOptionPane.showMessageDialog(InvoiceTable, "Select Invoice Row First","Error",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            invoices.remove(invoiceToBeDeleted);
            calculateInvoiceTableTotal();
            loadInvoiceTable();
            jLabel8.setText("");
            jLabel9.setText("");
            jLabel3.setText("");
            jTextField1.setText("");
            jTextField2.setText("");
            rightsideupdater(InvoiceTable.getSelectedRow());
            try{
                if((invoiceToBeDeleted-1)<0)
                {
                    invoiceToBeDeleted=0;
                    InvoiceTable.setRowSelectionInterval(0,0);
                }
                else
                {
                    InvoiceTable.setRowSelectionInterval(((invoiceToBeDeleted-1)%invoices.size()),((invoiceToBeDeleted-1)%invoices.size()));
                }
            }catch (Exception e)
            {
            }
        }
        if(invoices.size()==0)
        {
            DefaultTableModel m= new DefaultTableModel() {};
            m= (DefaultTableModel) InvoicesItems.getModel();
            InvoicesItems.setDefaultEditor(Object.class, null);
            while(m.getRowCount()>0)            
                m.removeRow(0);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        editflagg=true;
        int rowToBeDeleted;
        if((InvoicesItems.getSelectedRow()==-1) && (!(invoices.get(InvoiceTable.getSelectedRow()).getInvoicerow().isEmpty())))
        {
            JOptionPane.showMessageDialog(InvoicesItems, "Select Item Row First","Error",JOptionPane.ERROR_MESSAGE);
        }
        else if( invoices.get(InvoiceTable.getSelectedRow()).getInvoicerow().isEmpty())
        {
            JOptionPane.showMessageDialog(InvoicesItems, "Selected Invoice Is Empty","Error",JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            rowToBeDeleted=InvoicesItems.getSelectedRow();
            invoices.get(InvoiceTable.getSelectedRow()).getInvoicerow().remove(rowToBeDeleted);
            calculateInvoiceTableTotal();
            updateTotalAfterAddItem();
            loadInvoiceDetailsTable(InvoiceTable.getSelectedRow());
            rightsideupdater(InvoiceTable.getSelectedRow());
            try{
            InvoicesItems.setRowSelectionInterval((rowToBeDeleted-1)%(invoices.get(InvoiceTable.getSelectedRow()).getInvoicerow().size()), (rowToBeDeleted-1)%(invoices.get(InvoiceTable.getSelectedRow()).getInvoicerow().size()));
            }catch (Exception e)
            {
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        editflagg=true;
        jDialog3.setTitle("Add New Item To Invoice Number "+ (InvoiceTable.getSelectedRow()+1));
        jDialog3.setVisible(true);        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try
            {
                loadFileUtility(selectedfile1,selectedfile2);
            }catch(Exception e)
            {

            }
            calculateInvoiceTableTotal();
            loadInvoiceTable();
            jLabel3.setText("");
            jTextField1.setText("");
            jTextField2.setText("");
            jLabel8.setText("");
            jLabel9.setText(""); //LOLO
            if(invoices.size()!=0)
            {
                InvoiceTable.setRowSelectionInterval(0,0);
            }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void LoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileActionPerformed
        try{
            loadFileUtility();
        }catch(Exception e)
        {
            
        }
        calculateInvoiceTableTotal();
        loadInvoiceTable();
        
        
    }//GEN-LAST:event_LoadFileActionPerformed

    private void SaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileActionPerformed
        saveFileUtility();
    }//GEN-LAST:event_SaveFileActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try{
            InvTableAdd(jTextField3.getText(),date.parse(jTextField4.getText()));
            
        }catch(Exception e)
        { 
        }
        jTextField3.setText("");
        jTextField4.setText("");
        jLabel8.setText("");
        jLabel9.setText("");
        rightsideupdater(InvoiceTable.getSelectedRow());
        jDialog2.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        jTextField3.setText("");
        jDialog2.setVisible(false);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        boolean erroflag=false;
        String itemName;
        float price=0;
        int count;
        InvoiceLine invoiceline;
        itemName=jTextField5.getText();
        try {
                price=Float.parseFloat(jTextField7.getText());
            } catch ( Exception e ) 
            {
                erroflag=true;
            }
        try {
                jSpinner1.commitEdit();
            } catch ( Exception e ) 
            {
                erroflag=true;
            }
        if(!erroflag)
        {
            count = (Integer) jSpinner1.getValue();
            
            
            InvoiceHeader temp = findID(invoices.get(InvoiceTable.getSelectedRow()).getInoviceNumber());
            invoiceline= new InvoiceLine(itemName, price, count, temp);
            temp.getInvoicerow().add(invoiceline);
            calculateInvoiceTableTotal();
            updateTotalAfterAddItem();
            loadInvoiceDetailsTable(lastSelection);
            rightsideupdater(lastSelection);
        }
        jTextField5.setText("");
        jTextField7.setText("");
        jSpinner1.setValue((Object)1);
        jDialog3.setVisible(false);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jDialog3.setVisible(false);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jMenu1MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu1MenuSelected
        // TODO add your handling code here:
        if((selectedfile1==null)||(selectedfile2==null))
        {
            SaveFile.setEnabled(false);
        }
        else
        {
            SaveFile.setEnabled(true);
        }
    }//GEN-LAST:event_jMenu1MenuSelected

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
           if((selectedfile1==null)||(selectedfile2==null))
        {
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton4.setEnabled(false);
            jButton3.setEnabled(false);
            jButton5.setEnabled(false);
            jLabel3.setText("");
            jTextField1.setText("");
            jTextField2.setText("");
            jLabel8.setText("");
            jLabel9.setText("");
        }
//        else if(lastSelection == -1)
//        {
//            
//            jLabel3.setText("");
//            jTextField1.setText("");
//            jTextField2.setText("");
//            jLabel8.setText("");
//            jButton4.setEnabled(false);
//            jButton3.setEnabled(false);
//            jButton5.setEnabled(false);
//        }
        else
        {
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
        }
    }//GEN-LAST:event_formWindowActivated

    private void jTextField7KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyTyped
        char c=evt.getKeyChar();
        if(Character.isLetter(c)&&!evt.isAltDown()&&evt.isShiftDown()&&evt.isControlDown())
        {
            evt.consume();
        }
        try {
            Double.parseDouble(jTextField7.getText()+c);
        } catch (Exception e) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField7KeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(editflagg==true)
        {
            int option = JOptionPane.showConfirmDialog(this, "Do You Want To Exit And Discard Saving Changes?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(option == JOptionPane.YES_OPTION)
            {
                System.exit(0);
            }
        }
        else
        {
                System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jDialog2WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialog2WindowClosing
        jTextField3.setText("");
    }//GEN-LAST:event_jDialog2WindowClosing

    /**
     * @param args the command line arguments
     */
    private void loadFileUtility() throws Exception
    {
        max=0;
        {
            DefaultTableModel m= new DefaultTableModel() {};
            m= (DefaultTableModel) InvoiceTable.getModel();
            while(m.getRowCount()>0)            
                m.removeRow(0);
        }   
        invoices.clear();
        selectedfile1=null;
        selectedfile2=null;
        JOptionPane.showMessageDialog(this, "Kindly select Invoice Header File","Invoice Header Selection",JOptionPane.WARNING_MESSAGE);
        boolean extensionflag = false;
        int clicked;
        String Line=null;
        String []invoicesLines=null;
        String []invoicesDetails=null;
        String invoiceNumberStr;
        String invoiceitem;
        String itempriceStr;
        float itemprice;
        String itemcountStr;
        int itemcount;
        int invoiceNumber;
        String invoiceDateStr= null;
        Date invoiceDate;
        String invoiceCustomerName= null;
        //opening load file dialog
        do
        {
        JFileChooser fload = new JFileChooser();
        //file extension validation
        FileNameExtensionFilter filter=new FileNameExtensionFilter("CSV Files","csv");
        fload.setFileFilter(filter);
        fload.setDialogTitle("Open Invoice Header File"); //tell user to open Invoice Header File first
        clicked = fload.showOpenDialog(this);
        if(clicked == JFileChooser.APPROVE_OPTION)
        {
            invoices.clear();
            String filename = fload.getSelectedFile().getName();
            String fileextension = filename.substring(filename.lastIndexOf("."),filename.length());
            if(fileextension.equalsIgnoreCase(".csv"))
            {
                extensionflag=false; //correct file extension
            }
            else
            {
                extensionflag=true; //wrong file extension
                JOptionPane.showMessageDialog(this, "Error: Load File With Extension .CSV Only","Wrong File Selected",JOptionPane.WARNING_MESSAGE);
            }
            if(extensionflag == false)
            {
                selectedfile1 = fload.getSelectedFile();
                FileReader file= new FileReader(selectedfile1);
                BufferedReader B = new BufferedReader(file);
                while((Line = B.readLine())!= null)
                {
                   invoicesLines = Line.split(",");
                   invoiceNumberStr = invoicesLines[0];
                   invoiceDateStr = invoicesLines[1];
                   invoiceCustomerName = invoicesLines[2];
                   invoiceNumber = Integer.parseInt(invoiceNumberStr); //convert number from string to int
                   invoiceDate = date.parse(invoiceDateStr);
                   line=new InvoiceHeader(invoiceNumber, invoiceDate, invoiceCustomerName);
                   invoices.add(line);       
                }
                B.close();
                file.close();
            }
           
        }
        else
        {
            extensionflag = false;
        }
        }while (extensionflag == true);
        extensionflag = false;
        JOptionPane.showMessageDialog(this, "Kindly select Invoice Line File","Invoice Line Selection",JOptionPane.WARNING_MESSAGE);
        InvoiceLine invoiceline;
        do
        {
        JFileChooser fload = new JFileChooser();
        //file extension validation
        FileNameExtensionFilter filter=new FileNameExtensionFilter("CSV Files","csv");
        fload.setFileFilter(filter);
        fload.setDialogTitle("Open Invoice Line File"); //tell user to open Invoice Line File
        clicked = fload.showOpenDialog(this);
        if(clicked == JFileChooser.APPROVE_OPTION)
        {
            String filename = fload.getSelectedFile().getName();
            String fileextension = filename.substring(filename.lastIndexOf("."),filename.length());
            if(fileextension.equalsIgnoreCase(".csv"))
            {
                extensionflag=false; //correct file extension
            }
            else
            {
                extensionflag=true; //wrong file extension
                JOptionPane.showMessageDialog(this, "Error: Load File With Extension .CSV Only","Wrong File Selected",JOptionPane.WARNING_MESSAGE);
            }
            if(extensionflag == false)
            {
                selectedfile2 = fload.getSelectedFile();
                FileReader file= new FileReader(selectedfile2);
                BufferedReader B = new BufferedReader(file);
                while((Line = B.readLine())!= null)
                {
                   invoicesDetails = Line.split(",");
                   invoiceNumberStr = invoicesDetails[0];
                   invoiceitem = invoicesDetails[1];
                   itempriceStr = invoicesDetails[2];
                   itemcountStr = invoicesDetails[3];
                   invoiceNumber = Integer.parseInt(invoiceNumberStr); //convert number from string to int
                   itemprice=Float.parseFloat(itempriceStr);
                   itemcount=Integer.parseInt(itemcountStr);
                   InvoiceHeader temp = findID(invoiceNumber);
                   invoiceline= new InvoiceLine(invoiceitem, itemprice, itemcount, temp);
                   //invoiceDate = date.parse(invoiceDateStr);
                   temp.getInvoicerow().add(invoiceline);
                }
                B.close();
                file.close();
            }
           
        }
        else
        {
            extensionflag = false;
        }
        }while(extensionflag);
    }
    public void updateTotalAfterAddItem()
    {
       DefaultTableModel m= new DefaultTableModel() {};
       m= (DefaultTableModel) InvoiceTable.getModel();
       InvoiceTable.getSelectionModel().addListSelectionListener(this);
       InvoiceTable.setDefaultEditor(Object.class, null);
       
       m.setValueAt(invoices.get(InvoiceTable.getSelectedRow()).getInoviceTotal(), InvoiceTable.getSelectedRow(), 3);
    }
   private void loadInvoiceTable()
   {
       DefaultTableModel m= new DefaultTableModel() {};
       m= (DefaultTableModel) InvoiceTable.getModel();
       InvoiceTable.getSelectionModel().addListSelectionListener(this);
       InvoiceTable.setDefaultEditor(Object.class, null);
       
       int x=invoices.size();
//       if((editflag==true)||(addflag==true)||(removeflag==true))
//       {
            while(m.getRowCount()>0)            
                m.removeRow(0);
//       }
       Object data[]=new Object[4];
       for(int i=0;i<invoices.size();i++)
       {
        data[0]=invoices.get(i).getInoviceNumber();
        data[1]=invoices.get(i).getInoviceDate();
        data[2]=invoices.get(i).getInoviceCustomerName();
        data[3]=invoices.get(i).getInoviceTotal();
        ;
        ;
        ;
        
        m.addRow(data);
       }   
   }
   private void loadInvoiceDetailsTable(int selectedROW)
   {
       selectedROW=selectedROW%(invoices.size());
       DefaultTableModel m= new DefaultTableModel() {};
       m= (DefaultTableModel) InvoicesItems.getModel();
       InvoicesItems.setDefaultEditor(Object.class, null);
       while(m.getRowCount()>0)            
                m.removeRow(0);
       m.setRowCount(0);
       float total=0;
       Object data[]=new Object[5];
       if (selectedROW!=-1)
       {
           for(int j=0;j<invoices.get(selectedROW).getInvoicerow().size();j++)
           {
            data[0]=invoices.get(selectedROW).getInvoicerow().get(j).getMainInvoice().getInoviceNumber();
            data[1]=invoices.get(selectedROW).getInvoicerow().get(j).getItemName();
            data[2]=invoices.get(selectedROW).getInvoicerow().get(j).getItemPrice();
            data[3]=invoices.get(selectedROW).getInvoicerow().get(j).getItemCount();
                total=((invoices.get(selectedROW).getInvoicerow().get(j).getItemPrice())*(invoices.get(selectedROW).getInvoicerow().get(j).getItemCount()));
                invoices.get(selectedROW).getInvoicerow().get(j).setItemTotal(total);
            data[4]=invoices.get(selectedROW).getInvoicerow().get(j).getItemTotal();
            m.addRow(data);
           }
       }
   }
   
    private void calculateInvoiceTableTotal()
    {
        float total=0;
        for(int i=0;i<invoices.size();i++)
        {
            
            total=0;
            for(int j=0;j<invoices.get(i).getInvoicerow().size();j++)
            {
               total = total + ((invoices.get(i).getInvoicerow().get(j).getItemPrice())*(invoices.get(i).getInvoicerow().get(j).getItemCount()));
            }
            invoices.get(i).setInoviceTotal(total);
        }
    }
     private void saveFileUtility()
    {
        editflag=true;
/*########################### Save Invoices Header File ###########################*/
        int InvoiceLinelines=0;
        int totalInvoiceLinelines=0;
        int actualLine=0;
        FileWriter fw=null;
         try
        {
            fw= new FileWriter(selectedfile1);
        }catch(Exception e)
        {
             
        }
        JOptionPane.showMessageDialog(this, "The Old Invoices was overwritten By The New One Successfully","Save Successfully",JOptionPane.INFORMATION_MESSAGE);
         for(int i=0;i<invoices.size();i++)
         {
             String Line= invoices.get(i).getInoviceNumber()+","+date.format(invoices.get(i).getInoviceDate())+","+invoices.get(i).getInoviceCustomerName();
             if(i!=invoices.size()-1)
                 Line+="\n";
             
             try
                {
                   fw.write(Line);
                }catch(Exception e)
                {
                     
                }
         }
         try
         {
            fw.close();
         }catch(Exception e)
         {
             
         }

        try
            {
                fw= new FileWriter(selectedfile2);
            }catch(Exception e)
            {
                 
            }
        for(int i=0;i<invoices.size();i++)
        {
            totalInvoiceLinelines+=invoices.get(i).getInvoicerow().size();
        }
        for(int i=0;i<invoices.size();i++)
           {
               InvoiceLinelines=invoices.get(i).getInvoicerow().size();
               for(int j=0;j<InvoiceLinelines;j++)
               {
                    String Line= Integer.toString(invoices.get(i).getInvoicerow().get(j).getMainInvoice().getInoviceNumber())+",";
                    Line+=invoices.get(i).getInvoicerow().get(j).getItemName()+",";
                    Line+=Float.toString(invoices.get(i).getInvoicerow().get(j).getItemPrice())+",";
                    Line+=Integer.toString(invoices.get(i).getInvoicerow().get(j).getItemCount());
                    actualLine++;
                    
                    if(!(totalInvoiceLinelines == actualLine))
                    {
                         
                         Line+="\n";
                    }
                    else
                    {
                        
                    }
                    try
                    {
                        fw.write(Line);
                    }catch(Exception e)
                    {
                        
                    }
               }
           }
            try
            {
               fw.close();
            }catch(Exception e)
            {

            }
            try
            {
               
                loadFileUtility(selectedfile1,selectedfile2);
               //
            }catch(Exception e)
            {

            }
            calculateInvoiceTableTotal();
            loadInvoiceTable();
            jLabel3.setText("");
            jTextField1.setText("");
            jTextField2.setText("");
            jLabel8.setText("");
            jLabel9.setText(""); //LOLO
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Clasic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new MainJFrame().setVisible(true);
               jDialog2.setVisible(false);
               jDialog3.setVisible(false);
               
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable InvoiceTable;
    private javax.swing.JTable InvoicesItems;
    private javax.swing.JMenuItem LoadFile;
    private javax.swing.JMenuItem SaveFile;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    public javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    public javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private static javax.swing.JDialog jDialog2;
    private static javax.swing.JDialog jDialog3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if(invoices.size()>=1)
        {
        if(e.getSource().equals(InvoiceTable.getSelectionModel()))
        {
            InvoicesTableRowSelected();   
        }
    }
    }
    private void InvoicesTableRowSelected() {
        
            rIndex =InvoiceTable.getSelectedRow();
            if(lastSelection==-1)
            {
                
                jLabel3.setText("");
                jTextField1.setText("");
                jTextField2.setText("");
                jLabel8.setText("");
                jButton4.setEnabled(false);
                jButton3.setEnabled(false);
                jButton5.setEnabled(false);
            }
            else
            {
                
                jButton4.setEnabled(true);
                jButton3.setEnabled(true);
                jButton5.setEnabled(true);
            }
            //
            if (lastSelection!=rIndex)
            {
                loadInvoiceDetailsTable(rIndex);
                rightsideupdater(rIndex);
                lastSelection = rIndex;
            }
            //
    }

    private void rightsideupdater(int selectedROW) 
    {
        selectedROW=selectedROW%(invoices.size());
        if (selectedROW!=-1)
        {
            jLabel3.setText(Integer.toString(invoices.get(selectedROW).getInoviceNumber()));
            jTextField1.setText(date.format(invoices.get(selectedROW).getInoviceDate()));
            jTextField2.setText(invoices.get(selectedROW).getInoviceCustomerName());
            jLabel9.setText(Float.toString(invoices.get(selectedROW).getInoviceTotal()));
        }
    }
    public void InvTableAdd (String name, Date datedate)
    {
        jTextField3.setText("");
        
        
        //dateStr=dateStr.substring(ICONIFIED, WIDTH)
        if(name.equalsIgnoreCase(""))
        {
            JOptionPane.showMessageDialog(jDialog2, "Please Enter A Name For The Customer","Error",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            addflag=true;
            
            for(int i=0;i<invoices.size();i++)
            {
                
                if((invoices.get(i).getInoviceNumber())>(max))
                {
                    max=invoices.get(i).getInoviceNumber();
                   
                }
            }
            try{
                max++;
                InvoiceHeader newRow=new InvoiceHeader((max),datedate,name);
                
                invoices.add(newRow);
                
            }catch (Exception e)
            {
                
            }
              loadInvoiceTable();
              InvoiceTable.setRowSelectionInterval((invoices.size()-1), (invoices.size()-1));
        }
        
    }
    private void loadFileUtility(File f1,File f2) throws Exception
    {
        boolean extensionflag = false;
        int clicked;
        String Line=null;
        String []invoicesLines=null;
        String []invoicesDetails=null;
        String invoiceNumberStr;
        String invoiceitem;
        String itempriceStr;
        float itemprice;
        String itemcountStr;
        int itemcount;
        int invoiceNumber;
        String invoiceDateStr= null;
        Date invoiceDate;
        String invoiceCustomerName= null;
        InvoiceHeader invoiceline = null;
        invoices.clear();
        FileReader file= new FileReader(f1);
        BufferedReader B = new BufferedReader(file);
        while((Line = B.readLine())!= null)
        {
           invoicesLines = Line.split(",");
           invoiceNumberStr = invoicesLines[0];
           invoiceDateStr = invoicesLines[1];
           invoiceCustomerName = invoicesLines[2];
           invoiceNumber = Integer.parseInt(invoiceNumberStr); //convert number from string to int
           invoiceDate = date.parse(invoiceDateStr);
           line=new InvoiceHeader(invoiceNumber, invoiceDate, invoiceCustomerName);
           invoices.add(line);       
        }
        B.close();
        file.close();
        
        FileReader file2= new FileReader(f2);
        B = new BufferedReader(file2);
        while((Line = B.readLine())!= null)
        {
           invoicesDetails = Line.split(",");
           invoiceNumberStr = invoicesDetails[0];
           invoiceitem = invoicesDetails[1];
           itempriceStr = invoicesDetails[2];
           itemcountStr = invoicesDetails[3];
           invoiceNumber = Integer.parseInt(invoiceNumberStr); //convert number from string to int
           itemprice=Float.parseFloat(itempriceStr);
           itemcount=Integer.parseInt(itemcountStr);
           InvoiceHeader temp = findID(invoiceNumber);
            InvoiceLine invoiceine = new InvoiceLine(invoiceitem, itemprice, itemcount, temp);
           invoiceDate = date.parse(invoiceDateStr);
           temp.getInvoicerow().add(invoiceline);
        }
        B.close();
        file2.close();
}
}